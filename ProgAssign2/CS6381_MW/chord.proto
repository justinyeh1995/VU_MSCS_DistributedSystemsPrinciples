// Let us use the Version 3 syntax 
syntax = "proto3";

enum Tag {
    CHORD_REQ = 0;
    CHORD_REP = 1;
    CLIENT_REQ = 2;
    CLIENT_REP = 3;
}

// An enumeration for the role we are playing
enum Role {
    ROLE_UNKNOWN = 0;
    ROLE_PUBLISHER = 1;
    ROLE_SUBSCRIBER = 2;
    ROLE_BROKER = 3;  // played by the broker.
}

// an enumeration for the status of the message request
enum Status {
    STATUS_UNKNOWN = 0;
    STATUS_SUCCESS = 1;
    STATUS_FAILURE = 2;
    STATUS_CHECK_AGAIN = 3;   // when the server is not ready to provide info as yet
}

// define an enum of all message types supported on a discovery service.
// This could be REGISTER_REQ, LOOKUP_PUB_BY_TOPIC, READY
enum MsgTypes {
     TYPE_UNKNOWN = 0;
     TYPE_REGISTER = 1;  // used by pub, sub and broker.
     TYPE_ISREADY = 2;    // needed by publisher to know if it can proceed
     TYPE_LOOKUP_PUB_BY_TOPIC = 3;  // needed by a subscriber
     TYPE_LOOKUP_ALL_PUBS = 4;   // probably needed by broker
     // anything more
}

// use to encode the details of the publisher or subscriber
// IP addr and port number are needed for publisher side only
message RegistrantInfo {
    string id = 1;  // name of the entity
    uint64 hashVal = 2;  // hash of the topic
    optional string addr = 3; // IP address (only for publisher)
    optional uint32 port = 4; // port number (only for publisher)
}

// Likewise, instead of just comma separated list of topics, maybe a better way to send the topic list
// Finally, maybe a nested structure that includes the name, IP and port and any additional info about
// the pub/sub entity here.
message RegisterReq
{
    Role role = 1;   // enum indicating what role we are playing
    RegistrantInfo info = 2; // info about the registrant
    repeated string topiclist = 3; // an array of topic names (published or subscribed to)
}

// Response to registration can be a success or a failure accompanied by a reason.
message RegisterResp
{
    Status status = 1;   // success or failure
    optional string reason = 2; // reason for failure
}

// define a message type that publishers might send to a discovery service
// to see if the system is all ready and if they can proceed to publish their
// topics. Accordingly, there will be a req and resp message types.
message IsReadyReq
{
   // we really don't need to send any field
    uint32 visitCnt = 1;
    uint32 pubCnt = 2;
    uint32 subCnt = 3;
    uint32 brokerCnt = 4;
}

// Response to the IsReady request
message IsReadyResp
{
    bool status = 1; // yes or no
}

message LookupPubByTopicReq
{
    uint64 hash = 1; // hash of the topic
}

message LookupPubByTopicResp
{
	repeated RegistrantInfo publishers = 1;
}

// Chord message (one of many)
message ChordRequest
{
        MsgTypes msg_type = 1;
        oneof Content {
              RegisterReq register_req = 2;
              IsReadyReq isready_req = 3;
              LookupPubByTopicReq lookup_req = 4;
              // add more 
        }
}

// Response to chord req will be similar oneof of the responses.
message ChordResp
{
        MsgTypes msg_type = 1;
        oneof Content {
              RegisterResp register_resp = 2;
              IsReadyResp isready_resp = 3;
              LookupPubByTopicResp lookup_resp = 4;
              // add more 
        }
}


